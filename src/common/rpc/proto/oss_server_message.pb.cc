// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oss_server_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "oss_server_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* OSSCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OSSCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OSSCommandReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OSSCommandReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* OSSCommandMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OSSCommandMessage_reflection_ = NULL;
struct OSSCommandMessageOneofInstance {
  const ::rpc::OSSCommandRequest* request_;
  const ::rpc::OSSCommandReply* reply_;
}* OSSCommandMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* OSSCommandMessage_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto() {
  protobuf_AddDesc_oss_5fserver_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "oss_server_message.proto");
  GOOGLE_CHECK(file != NULL);
  OSSCommandRequest_descriptor_ = file->message_type(0);
  static const int OSSCommandRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandRequest, command_),
  };
  OSSCommandRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OSSCommandRequest_descriptor_,
      OSSCommandRequest::internal_default_instance(),
      OSSCommandRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(OSSCommandRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandRequest, _internal_metadata_));
  OSSCommandReply_descriptor_ = file->message_type(1);
  static const int OSSCommandReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandReply, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandReply, return_msg_),
  };
  OSSCommandReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OSSCommandReply_descriptor_,
      OSSCommandReply::internal_default_instance(),
      OSSCommandReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(OSSCommandReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandReply, _internal_metadata_));
  OSSCommandMessage_descriptor_ = file->message_type(2);
  static const int OSSCommandMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandMessage, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OSSCommandMessage_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OSSCommandMessage_default_oneof_instance_, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandMessage, rq_),
  };
  OSSCommandMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OSSCommandMessage_descriptor_,
      OSSCommandMessage::internal_default_instance(),
      OSSCommandMessage_offsets_,
      -1,
      -1,
      -1,
      OSSCommandMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandMessage, _oneof_case_[0]),
      sizeof(OSSCommandMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSSCommandMessage, _internal_metadata_));
  OSSCommandMessage_Type_descriptor_ = OSSCommandMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OSSCommandRequest_descriptor_, OSSCommandRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OSSCommandReply_descriptor_, OSSCommandReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OSSCommandMessage_descriptor_, OSSCommandMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_oss_5fserver_5fmessage_2eproto() {
  OSSCommandRequest_default_instance_.Shutdown();
  delete OSSCommandRequest_reflection_;
  OSSCommandReply_default_instance_.Shutdown();
  delete OSSCommandReply_reflection_;
  OSSCommandMessage_default_instance_.Shutdown();
  delete OSSCommandMessage_default_oneof_instance_;
  delete OSSCommandMessage_reflection_;
}

void protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  OSSCommandRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OSSCommandReply_default_instance_.DefaultConstruct();
  OSSCommandMessage_default_instance_.DefaultConstruct();
  OSSCommandMessage_default_oneof_instance_ = new OSSCommandMessageOneofInstance();
  OSSCommandRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  OSSCommandReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  OSSCommandMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_once_);
void protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030oss_server_message.proto\022\003rpc\"$\n\021OSSCo"
    "mmandRequest\022\017\n\007command\030\001 \001(\t\"1\n\017OSSComm"
    "andReply\022\n\n\002rc\030\001 \001(\005\022\022\n\nreturn_msg\030\002 \001(\t"
    "\"\266\001\n\021OSSCommandMessage\022)\n\004type\030\001 \001(\0162\033.r"
    "pc.OSSCommandMessage.Type\022)\n\007request\030\002 \001"
    "(\0132\026.rpc.OSSCommandRequestH\000\022%\n\005reply\030\003 "
    "\001(\0132\024.rpc.OSSCommandReplyH\000\"\036\n\004Type\022\013\n\007R"
    "EQUEST\020\000\022\t\n\005REPLY\020\001B\004\n\002rqb\006proto3", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "oss_server_message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_oss_5fserver_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_once_);
void protobuf_AddDesc_oss_5fserver_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_oss_5fserver_5fmessage_2eproto {
  StaticDescriptorInitializer_oss_5fserver_5fmessage_2eproto() {
    protobuf_AddDesc_oss_5fserver_5fmessage_2eproto();
  }
} static_descriptor_initializer_oss_5fserver_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OSSCommandRequest::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OSSCommandRequest::OSSCommandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.OSSCommandRequest)
}

void OSSCommandRequest::InitAsDefaultInstance() {
}

OSSCommandRequest::OSSCommandRequest(const OSSCommandRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.OSSCommandRequest)
}

void OSSCommandRequest::SharedCtor() {
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OSSCommandRequest::~OSSCommandRequest() {
  // @@protoc_insertion_point(destructor:rpc.OSSCommandRequest)
  SharedDtor();
}

void OSSCommandRequest::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OSSCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OSSCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OSSCommandRequest_descriptor_;
}

const OSSCommandRequest& OSSCommandRequest::default_instance() {
  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OSSCommandRequest> OSSCommandRequest_default_instance_;

OSSCommandRequest* OSSCommandRequest::New(::google::protobuf::Arena* arena) const {
  OSSCommandRequest* n = new OSSCommandRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OSSCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.OSSCommandRequest)
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OSSCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.OSSCommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.OSSCommandRequest.command"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.OSSCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.OSSCommandRequest)
  return false;
#undef DO_
}

void OSSCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.OSSCommandRequest)
  // optional string command = 1;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.OSSCommandRequest.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.OSSCommandRequest)
}

::google::protobuf::uint8* OSSCommandRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.OSSCommandRequest)
  // optional string command = 1;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.OSSCommandRequest.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.OSSCommandRequest)
  return target;
}

size_t OSSCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.OSSCommandRequest)
  size_t total_size = 0;

  // optional string command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSSCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.OSSCommandRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OSSCommandRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OSSCommandRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.OSSCommandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.OSSCommandRequest)
    UnsafeMergeFrom(*source);
  }
}

void OSSCommandRequest::MergeFrom(const OSSCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.OSSCommandRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OSSCommandRequest::UnsafeMergeFrom(const OSSCommandRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
}

void OSSCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.OSSCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSSCommandRequest::CopyFrom(const OSSCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.OSSCommandRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OSSCommandRequest::IsInitialized() const {

  return true;
}

void OSSCommandRequest::Swap(OSSCommandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OSSCommandRequest::InternalSwap(OSSCommandRequest* other) {
  command_.Swap(&other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OSSCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OSSCommandRequest_descriptor_;
  metadata.reflection = OSSCommandRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OSSCommandRequest

// optional string command = 1;
void OSSCommandRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OSSCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandRequest.command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OSSCommandRequest::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.OSSCommandRequest.command)
}
void OSSCommandRequest::set_command(const char* value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.OSSCommandRequest.command)
}
void OSSCommandRequest::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.OSSCommandRequest.command)
}
::std::string* OSSCommandRequest::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandRequest.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OSSCommandRequest::release_command() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandRequest.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OSSCommandRequest::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandRequest.command)
}

inline const OSSCommandRequest* OSSCommandRequest::internal_default_instance() {
  return &OSSCommandRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OSSCommandReply::kRcFieldNumber;
const int OSSCommandReply::kReturnMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OSSCommandReply::OSSCommandReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.OSSCommandReply)
}

void OSSCommandReply::InitAsDefaultInstance() {
}

OSSCommandReply::OSSCommandReply(const OSSCommandReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.OSSCommandReply)
}

void OSSCommandReply::SharedCtor() {
  return_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rc_ = 0;
  _cached_size_ = 0;
}

OSSCommandReply::~OSSCommandReply() {
  // @@protoc_insertion_point(destructor:rpc.OSSCommandReply)
  SharedDtor();
}

void OSSCommandReply::SharedDtor() {
  return_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OSSCommandReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OSSCommandReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OSSCommandReply_descriptor_;
}

const OSSCommandReply& OSSCommandReply::default_instance() {
  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OSSCommandReply> OSSCommandReply_default_instance_;

OSSCommandReply* OSSCommandReply::New(::google::protobuf::Arena* arena) const {
  OSSCommandReply* n = new OSSCommandReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OSSCommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.OSSCommandReply)
  rc_ = 0;
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OSSCommandReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.OSSCommandReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rc = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_return_msg;
        break;
      }

      // optional string return_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_return_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->return_msg().data(), this->return_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.OSSCommandReply.return_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.OSSCommandReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.OSSCommandReply)
  return false;
#undef DO_
}

void OSSCommandReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.OSSCommandReply)
  // optional int32 rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rc(), output);
  }

  // optional string return_msg = 2;
  if (this->return_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->return_msg().data(), this->return_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.OSSCommandReply.return_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->return_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.OSSCommandReply)
}

::google::protobuf::uint8* OSSCommandReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.OSSCommandReply)
  // optional int32 rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rc(), target);
  }

  // optional string return_msg = 2;
  if (this->return_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->return_msg().data(), this->return_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.OSSCommandReply.return_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->return_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.OSSCommandReply)
  return target;
}

size_t OSSCommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.OSSCommandReply)
  size_t total_size = 0;

  // optional int32 rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rc());
  }

  // optional string return_msg = 2;
  if (this->return_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->return_msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSSCommandReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.OSSCommandReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OSSCommandReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OSSCommandReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.OSSCommandReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.OSSCommandReply)
    UnsafeMergeFrom(*source);
  }
}

void OSSCommandReply::MergeFrom(const OSSCommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.OSSCommandReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OSSCommandReply::UnsafeMergeFrom(const OSSCommandReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.rc() != 0) {
    set_rc(from.rc());
  }
  if (from.return_msg().size() > 0) {

    return_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.return_msg_);
  }
}

void OSSCommandReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.OSSCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSSCommandReply::CopyFrom(const OSSCommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.OSSCommandReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OSSCommandReply::IsInitialized() const {

  return true;
}

void OSSCommandReply::Swap(OSSCommandReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OSSCommandReply::InternalSwap(OSSCommandReply* other) {
  std::swap(rc_, other->rc_);
  return_msg_.Swap(&other->return_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OSSCommandReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OSSCommandReply_descriptor_;
  metadata.reflection = OSSCommandReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OSSCommandReply

// optional int32 rc = 1;
void OSSCommandReply::clear_rc() {
  rc_ = 0;
}
::google::protobuf::int32 OSSCommandReply::rc() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandReply.rc)
  return rc_;
}
void OSSCommandReply::set_rc(::google::protobuf::int32 value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:rpc.OSSCommandReply.rc)
}

// optional string return_msg = 2;
void OSSCommandReply::clear_return_msg() {
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OSSCommandReply::return_msg() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandReply.return_msg)
  return return_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OSSCommandReply::set_return_msg(const ::std::string& value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.OSSCommandReply.return_msg)
}
void OSSCommandReply::set_return_msg(const char* value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.OSSCommandReply.return_msg)
}
void OSSCommandReply::set_return_msg(const char* value, size_t size) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.OSSCommandReply.return_msg)
}
::std::string* OSSCommandReply::mutable_return_msg() {
  
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandReply.return_msg)
  return return_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OSSCommandReply::release_return_msg() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandReply.return_msg)
  
  return return_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OSSCommandReply::set_allocated_return_msg(::std::string* return_msg) {
  if (return_msg != NULL) {
    
  } else {
    
  }
  return_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_msg);
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandReply.return_msg)
}

inline const OSSCommandReply* OSSCommandReply::internal_default_instance() {
  return &OSSCommandReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OSSCommandMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OSSCommandMessage_Type_descriptor_;
}
bool OSSCommandMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OSSCommandMessage_Type OSSCommandMessage::REQUEST;
const OSSCommandMessage_Type OSSCommandMessage::REPLY;
const OSSCommandMessage_Type OSSCommandMessage::Type_MIN;
const OSSCommandMessage_Type OSSCommandMessage::Type_MAX;
const int OSSCommandMessage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OSSCommandMessage::kTypeFieldNumber;
const int OSSCommandMessage::kRequestFieldNumber;
const int OSSCommandMessage::kReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OSSCommandMessage::OSSCommandMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.OSSCommandMessage)
}

void OSSCommandMessage::InitAsDefaultInstance() {
  OSSCommandMessage_default_oneof_instance_->request_ = const_cast< ::rpc::OSSCommandRequest*>(
      ::rpc::OSSCommandRequest::internal_default_instance());
  OSSCommandMessage_default_oneof_instance_->reply_ = const_cast< ::rpc::OSSCommandReply*>(
      ::rpc::OSSCommandReply::internal_default_instance());
}

OSSCommandMessage::OSSCommandMessage(const OSSCommandMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.OSSCommandMessage)
}

void OSSCommandMessage::SharedCtor() {
  type_ = 0;
  clear_has_rq();
  _cached_size_ = 0;
}

OSSCommandMessage::~OSSCommandMessage() {
  // @@protoc_insertion_point(destructor:rpc.OSSCommandMessage)
  SharedDtor();
}

void OSSCommandMessage::SharedDtor() {
  if (has_rq()) {
    clear_rq();
  }
}

void OSSCommandMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OSSCommandMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OSSCommandMessage_descriptor_;
}

const OSSCommandMessage& OSSCommandMessage::default_instance() {
  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OSSCommandMessage> OSSCommandMessage_default_instance_;

OSSCommandMessage* OSSCommandMessage::New(::google::protobuf::Arena* arena) const {
  OSSCommandMessage* n = new OSSCommandMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OSSCommandMessage::clear_rq() {
// @@protoc_insertion_point(one_of_clear_start:rpc.OSSCommandMessage)
  switch (rq_case()) {
    case kRequest: {
      delete rq_.request_;
      break;
    }
    case kReply: {
      delete rq_.reply_;
      break;
    }
    case RQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RQ_NOT_SET;
}


void OSSCommandMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.OSSCommandMessage)
  type_ = 0;
  clear_rq();
}

bool OSSCommandMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.OSSCommandMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.OSSCommandMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::rpc::OSSCommandMessage_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .rpc.OSSCommandRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        goto after_reply;
        break;
      }

      // optional .rpc.OSSCommandReply reply = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
       after_reply:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.OSSCommandMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.OSSCommandMessage)
  return false;
#undef DO_
}

void OSSCommandMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.OSSCommandMessage)
  // optional .rpc.OSSCommandMessage.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .rpc.OSSCommandRequest request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *rq_.request_, output);
  }

  // optional .rpc.OSSCommandReply reply = 3;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *rq_.reply_, output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.OSSCommandMessage)
}

::google::protobuf::uint8* OSSCommandMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.OSSCommandMessage)
  // optional .rpc.OSSCommandMessage.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .rpc.OSSCommandRequest request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *rq_.request_, false, target);
  }

  // optional .rpc.OSSCommandReply reply = 3;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *rq_.reply_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.OSSCommandMessage)
  return target;
}

size_t OSSCommandMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.OSSCommandMessage)
  size_t total_size = 0;

  // optional .rpc.OSSCommandMessage.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (rq_case()) {
    // optional .rpc.OSSCommandRequest request = 2;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rq_.request_);
      break;
    }
    // optional .rpc.OSSCommandReply reply = 3;
    case kReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rq_.reply_);
      break;
    }
    case RQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSSCommandMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.OSSCommandMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OSSCommandMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OSSCommandMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.OSSCommandMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.OSSCommandMessage)
    UnsafeMergeFrom(*source);
  }
}

void OSSCommandMessage::MergeFrom(const OSSCommandMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.OSSCommandMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OSSCommandMessage::UnsafeMergeFrom(const OSSCommandMessage& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.rq_case()) {
    case kRequest: {
      mutable_request()->::rpc::OSSCommandRequest::MergeFrom(from.request());
      break;
    }
    case kReply: {
      mutable_reply()->::rpc::OSSCommandReply::MergeFrom(from.reply());
      break;
    }
    case RQ_NOT_SET: {
      break;
    }
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void OSSCommandMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.OSSCommandMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSSCommandMessage::CopyFrom(const OSSCommandMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.OSSCommandMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OSSCommandMessage::IsInitialized() const {

  return true;
}

void OSSCommandMessage::Swap(OSSCommandMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OSSCommandMessage::InternalSwap(OSSCommandMessage* other) {
  std::swap(type_, other->type_);
  std::swap(rq_, other->rq_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OSSCommandMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OSSCommandMessage_descriptor_;
  metadata.reflection = OSSCommandMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OSSCommandMessage

// optional .rpc.OSSCommandMessage.Type type = 1;
void OSSCommandMessage::clear_type() {
  type_ = 0;
}
::rpc::OSSCommandMessage_Type OSSCommandMessage::type() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandMessage.type)
  return static_cast< ::rpc::OSSCommandMessage_Type >(type_);
}
void OSSCommandMessage::set_type(::rpc::OSSCommandMessage_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rpc.OSSCommandMessage.type)
}

// optional .rpc.OSSCommandRequest request = 2;
bool OSSCommandMessage::has_request() const {
  return rq_case() == kRequest;
}
void OSSCommandMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void OSSCommandMessage::clear_request() {
  if (has_request()) {
    delete rq_.request_;
    clear_has_rq();
  }
}
 const ::rpc::OSSCommandRequest& OSSCommandMessage::request() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandMessage.request)
  return has_request()
      ? *rq_.request_
      : ::rpc::OSSCommandRequest::default_instance();
}
::rpc::OSSCommandRequest* OSSCommandMessage::mutable_request() {
  if (!has_request()) {
    clear_rq();
    set_has_request();
    rq_.request_ = new ::rpc::OSSCommandRequest;
  }
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandMessage.request)
  return rq_.request_;
}
::rpc::OSSCommandRequest* OSSCommandMessage::release_request() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandMessage.request)
  if (has_request()) {
    clear_has_rq();
    ::rpc::OSSCommandRequest* temp = rq_.request_;
    rq_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OSSCommandMessage::set_allocated_request(::rpc::OSSCommandRequest* request) {
  clear_rq();
  if (request) {
    set_has_request();
    rq_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandMessage.request)
}

// optional .rpc.OSSCommandReply reply = 3;
bool OSSCommandMessage::has_reply() const {
  return rq_case() == kReply;
}
void OSSCommandMessage::set_has_reply() {
  _oneof_case_[0] = kReply;
}
void OSSCommandMessage::clear_reply() {
  if (has_reply()) {
    delete rq_.reply_;
    clear_has_rq();
  }
}
 const ::rpc::OSSCommandReply& OSSCommandMessage::reply() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandMessage.reply)
  return has_reply()
      ? *rq_.reply_
      : ::rpc::OSSCommandReply::default_instance();
}
::rpc::OSSCommandReply* OSSCommandMessage::mutable_reply() {
  if (!has_reply()) {
    clear_rq();
    set_has_reply();
    rq_.reply_ = new ::rpc::OSSCommandReply;
  }
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandMessage.reply)
  return rq_.reply_;
}
::rpc::OSSCommandReply* OSSCommandMessage::release_reply() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandMessage.reply)
  if (has_reply()) {
    clear_has_rq();
    ::rpc::OSSCommandReply* temp = rq_.reply_;
    rq_.reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OSSCommandMessage::set_allocated_reply(::rpc::OSSCommandReply* reply) {
  clear_rq();
  if (reply) {
    set_has_reply();
    rq_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandMessage.reply)
}

bool OSSCommandMessage::has_rq() const {
  return rq_case() != RQ_NOT_SET;
}
void OSSCommandMessage::clear_has_rq() {
  _oneof_case_[0] = RQ_NOT_SET;
}
OSSCommandMessage::RqCase OSSCommandMessage::rq_case() const {
  return OSSCommandMessage::RqCase(_oneof_case_[0]);
}
inline const OSSCommandMessage* OSSCommandMessage::internal_default_instance() {
  return &OSSCommandMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
