// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oss_server_message.proto

#ifndef PROTOBUF_oss_5fserver_5fmessage_2eproto__INCLUDED
#define PROTOBUF_oss_5fserver_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_oss_5fserver_5fmessage_2eproto();
void protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto();
void protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto();
void protobuf_ShutdownFile_oss_5fserver_5fmessage_2eproto();

class OSSCommandMessage;
class OSSCommandReply;
class OSSCommandRequest;

enum OSSCommandMessage_Type {
  OSSCommandMessage_Type_REQUEST = 0,
  OSSCommandMessage_Type_REPLY = 1,
  OSSCommandMessage_Type_OSSCommandMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OSSCommandMessage_Type_OSSCommandMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OSSCommandMessage_Type_IsValid(int value);
const OSSCommandMessage_Type OSSCommandMessage_Type_Type_MIN = OSSCommandMessage_Type_REQUEST;
const OSSCommandMessage_Type OSSCommandMessage_Type_Type_MAX = OSSCommandMessage_Type_REPLY;
const int OSSCommandMessage_Type_Type_ARRAYSIZE = OSSCommandMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* OSSCommandMessage_Type_descriptor();
inline const ::std::string& OSSCommandMessage_Type_Name(OSSCommandMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    OSSCommandMessage_Type_descriptor(), value);
}
inline bool OSSCommandMessage_Type_Parse(
    const ::std::string& name, OSSCommandMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OSSCommandMessage_Type>(
    OSSCommandMessage_Type_descriptor(), name, value);
}
// ===================================================================

class OSSCommandRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.OSSCommandRequest) */ {
 public:
  OSSCommandRequest();
  virtual ~OSSCommandRequest();

  OSSCommandRequest(const OSSCommandRequest& from);

  inline OSSCommandRequest& operator=(const OSSCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OSSCommandRequest& default_instance();

  static const OSSCommandRequest* internal_default_instance();

  void Swap(OSSCommandRequest* other);

  // implements Message ----------------------------------------------

  inline OSSCommandRequest* New() const { return New(NULL); }

  OSSCommandRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OSSCommandRequest& from);
  void MergeFrom(const OSSCommandRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OSSCommandRequest* other);
  void UnsafeMergeFrom(const OSSCommandRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:rpc.OSSCommandRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_oss_5fserver_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OSSCommandRequest> OSSCommandRequest_default_instance_;

// -------------------------------------------------------------------

class OSSCommandReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.OSSCommandReply) */ {
 public:
  OSSCommandReply();
  virtual ~OSSCommandReply();

  OSSCommandReply(const OSSCommandReply& from);

  inline OSSCommandReply& operator=(const OSSCommandReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OSSCommandReply& default_instance();

  static const OSSCommandReply* internal_default_instance();

  void Swap(OSSCommandReply* other);

  // implements Message ----------------------------------------------

  inline OSSCommandReply* New() const { return New(NULL); }

  OSSCommandReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OSSCommandReply& from);
  void MergeFrom(const OSSCommandReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OSSCommandReply* other);
  void UnsafeMergeFrom(const OSSCommandReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  ::google::protobuf::int32 rc() const;
  void set_rc(::google::protobuf::int32 value);

  // optional string return_msg = 2;
  void clear_return_msg();
  static const int kReturnMsgFieldNumber = 2;
  const ::std::string& return_msg() const;
  void set_return_msg(const ::std::string& value);
  void set_return_msg(const char* value);
  void set_return_msg(const char* value, size_t size);
  ::std::string* mutable_return_msg();
  ::std::string* release_return_msg();
  void set_allocated_return_msg(::std::string* return_msg);

  // @@protoc_insertion_point(class_scope:rpc.OSSCommandReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr return_msg_;
  ::google::protobuf::int32 rc_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_oss_5fserver_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OSSCommandReply> OSSCommandReply_default_instance_;

// -------------------------------------------------------------------

class OSSCommandMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.OSSCommandMessage) */ {
 public:
  OSSCommandMessage();
  virtual ~OSSCommandMessage();

  OSSCommandMessage(const OSSCommandMessage& from);

  inline OSSCommandMessage& operator=(const OSSCommandMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OSSCommandMessage& default_instance();

  enum RqCase {
    kRequest = 2,
    kReply = 3,
    RQ_NOT_SET = 0,
  };

  static const OSSCommandMessage* internal_default_instance();

  void Swap(OSSCommandMessage* other);

  // implements Message ----------------------------------------------

  inline OSSCommandMessage* New() const { return New(NULL); }

  OSSCommandMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OSSCommandMessage& from);
  void MergeFrom(const OSSCommandMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OSSCommandMessage* other);
  void UnsafeMergeFrom(const OSSCommandMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OSSCommandMessage_Type Type;
  static const Type REQUEST =
    OSSCommandMessage_Type_REQUEST;
  static const Type REPLY =
    OSSCommandMessage_Type_REPLY;
  static inline bool Type_IsValid(int value) {
    return OSSCommandMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    OSSCommandMessage_Type_Type_MIN;
  static const Type Type_MAX =
    OSSCommandMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    OSSCommandMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return OSSCommandMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return OSSCommandMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return OSSCommandMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rpc.OSSCommandMessage.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::rpc::OSSCommandMessage_Type type() const;
  void set_type(::rpc::OSSCommandMessage_Type value);

  // optional .rpc.OSSCommandRequest request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::rpc::OSSCommandRequest& request() const;
  ::rpc::OSSCommandRequest* mutable_request();
  ::rpc::OSSCommandRequest* release_request();
  void set_allocated_request(::rpc::OSSCommandRequest* request);

  // optional .rpc.OSSCommandReply reply = 3;
  bool has_reply() const;
  void clear_reply();
  static const int kReplyFieldNumber = 3;
  const ::rpc::OSSCommandReply& reply() const;
  ::rpc::OSSCommandReply* mutable_reply();
  ::rpc::OSSCommandReply* release_reply();
  void set_allocated_reply(::rpc::OSSCommandReply* reply);

  RqCase rq_case() const;
  // @@protoc_insertion_point(class_scope:rpc.OSSCommandMessage)
 private:
  inline void set_has_request();
  inline void set_has_reply();

  inline bool has_rq() const;
  void clear_rq();
  inline void clear_has_rq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union RqUnion {
    RqUnion() {}
    ::rpc::OSSCommandRequest* request_;
    ::rpc::OSSCommandReply* reply_;
  } rq_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_oss_5fserver_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_oss_5fserver_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_oss_5fserver_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_oss_5fserver_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OSSCommandMessage> OSSCommandMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OSSCommandRequest

// optional string command = 1;
inline void OSSCommandRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OSSCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandRequest.command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OSSCommandRequest::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.OSSCommandRequest.command)
}
inline void OSSCommandRequest::set_command(const char* value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.OSSCommandRequest.command)
}
inline void OSSCommandRequest::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.OSSCommandRequest.command)
}
inline ::std::string* OSSCommandRequest::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandRequest.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OSSCommandRequest::release_command() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandRequest.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OSSCommandRequest::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandRequest.command)
}

inline const OSSCommandRequest* OSSCommandRequest::internal_default_instance() {
  return &OSSCommandRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// OSSCommandReply

// optional int32 rc = 1;
inline void OSSCommandReply::clear_rc() {
  rc_ = 0;
}
inline ::google::protobuf::int32 OSSCommandReply::rc() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandReply.rc)
  return rc_;
}
inline void OSSCommandReply::set_rc(::google::protobuf::int32 value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:rpc.OSSCommandReply.rc)
}

// optional string return_msg = 2;
inline void OSSCommandReply::clear_return_msg() {
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OSSCommandReply::return_msg() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandReply.return_msg)
  return return_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OSSCommandReply::set_return_msg(const ::std::string& value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.OSSCommandReply.return_msg)
}
inline void OSSCommandReply::set_return_msg(const char* value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.OSSCommandReply.return_msg)
}
inline void OSSCommandReply::set_return_msg(const char* value, size_t size) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.OSSCommandReply.return_msg)
}
inline ::std::string* OSSCommandReply::mutable_return_msg() {
  
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandReply.return_msg)
  return return_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OSSCommandReply::release_return_msg() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandReply.return_msg)
  
  return return_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OSSCommandReply::set_allocated_return_msg(::std::string* return_msg) {
  if (return_msg != NULL) {
    
  } else {
    
  }
  return_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_msg);
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandReply.return_msg)
}

inline const OSSCommandReply* OSSCommandReply::internal_default_instance() {
  return &OSSCommandReply_default_instance_.get();
}
// -------------------------------------------------------------------

// OSSCommandMessage

// optional .rpc.OSSCommandMessage.Type type = 1;
inline void OSSCommandMessage::clear_type() {
  type_ = 0;
}
inline ::rpc::OSSCommandMessage_Type OSSCommandMessage::type() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandMessage.type)
  return static_cast< ::rpc::OSSCommandMessage_Type >(type_);
}
inline void OSSCommandMessage::set_type(::rpc::OSSCommandMessage_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rpc.OSSCommandMessage.type)
}

// optional .rpc.OSSCommandRequest request = 2;
inline bool OSSCommandMessage::has_request() const {
  return rq_case() == kRequest;
}
inline void OSSCommandMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void OSSCommandMessage::clear_request() {
  if (has_request()) {
    delete rq_.request_;
    clear_has_rq();
  }
}
inline  const ::rpc::OSSCommandRequest& OSSCommandMessage::request() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandMessage.request)
  return has_request()
      ? *rq_.request_
      : ::rpc::OSSCommandRequest::default_instance();
}
inline ::rpc::OSSCommandRequest* OSSCommandMessage::mutable_request() {
  if (!has_request()) {
    clear_rq();
    set_has_request();
    rq_.request_ = new ::rpc::OSSCommandRequest;
  }
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandMessage.request)
  return rq_.request_;
}
inline ::rpc::OSSCommandRequest* OSSCommandMessage::release_request() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandMessage.request)
  if (has_request()) {
    clear_has_rq();
    ::rpc::OSSCommandRequest* temp = rq_.request_;
    rq_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OSSCommandMessage::set_allocated_request(::rpc::OSSCommandRequest* request) {
  clear_rq();
  if (request) {
    set_has_request();
    rq_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandMessage.request)
}

// optional .rpc.OSSCommandReply reply = 3;
inline bool OSSCommandMessage::has_reply() const {
  return rq_case() == kReply;
}
inline void OSSCommandMessage::set_has_reply() {
  _oneof_case_[0] = kReply;
}
inline void OSSCommandMessage::clear_reply() {
  if (has_reply()) {
    delete rq_.reply_;
    clear_has_rq();
  }
}
inline  const ::rpc::OSSCommandReply& OSSCommandMessage::reply() const {
  // @@protoc_insertion_point(field_get:rpc.OSSCommandMessage.reply)
  return has_reply()
      ? *rq_.reply_
      : ::rpc::OSSCommandReply::default_instance();
}
inline ::rpc::OSSCommandReply* OSSCommandMessage::mutable_reply() {
  if (!has_reply()) {
    clear_rq();
    set_has_reply();
    rq_.reply_ = new ::rpc::OSSCommandReply;
  }
  // @@protoc_insertion_point(field_mutable:rpc.OSSCommandMessage.reply)
  return rq_.reply_;
}
inline ::rpc::OSSCommandReply* OSSCommandMessage::release_reply() {
  // @@protoc_insertion_point(field_release:rpc.OSSCommandMessage.reply)
  if (has_reply()) {
    clear_has_rq();
    ::rpc::OSSCommandReply* temp = rq_.reply_;
    rq_.reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OSSCommandMessage::set_allocated_reply(::rpc::OSSCommandReply* reply) {
  clear_rq();
  if (reply) {
    set_has_reply();
    rq_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.OSSCommandMessage.reply)
}

inline bool OSSCommandMessage::has_rq() const {
  return rq_case() != RQ_NOT_SET;
}
inline void OSSCommandMessage::clear_has_rq() {
  _oneof_case_[0] = RQ_NOT_SET;
}
inline OSSCommandMessage::RqCase OSSCommandMessage::rq_case() const {
  return OSSCommandMessage::RqCase(_oneof_case_[0]);
}
inline const OSSCommandMessage* OSSCommandMessage::internal_default_instance() {
  return &OSSCommandMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpc::OSSCommandMessage_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::OSSCommandMessage_Type>() {
  return ::rpc::OSSCommandMessage_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_oss_5fserver_5fmessage_2eproto__INCLUDED
